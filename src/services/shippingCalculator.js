const { getThaiTime } = require("./timeService");

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ (CBM)
 * @param {number} width - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (‡∏ã‡∏°.)
 * @param {number} length - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß (‡∏ã‡∏°.)
 * @param {number} height - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (‡∏ã‡∏°.)
 * @returns {number} ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô CBM
 */
function calculateCBM(width, length, height) {
  return (width * length * height) / 1000000;
}

/**
 * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Rank ‡∏ï‡∏≤‡∏°‡∏¢‡∏≠‡∏î‡∏™‡∏∞‡∏™‡∏°
 * @param {number} accumulatedAmount - ‡∏¢‡∏≠‡∏î‡∏™‡∏∞‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ (‡∏ö‡∏≤‡∏ó)
 * @returns {string} Rank ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */
function determineRank(accumulatedAmount = 0) {
  if (accumulatedAmount > 2000000) return "STAR";
  if (accumulatedAmount > 500000) return "DIAMOND";
  return "SILVER";
}

/**
 * ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏° Rank ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 * @param {string} rank - Rank ‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 * @param {string} productType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ('general', 'type1-2', 'special')
 * @param {string} shippingMethod - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á ('land', 'sea')
 * @returns {Object} ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ ‡∏Å‡∏Å. ‡πÅ‡∏•‡∏∞ CBM
 */
function getShippingRate(
  rank = "SILVER",
  productType = "general",
  shippingMethod = "land"
) {
  // Normalize inputs
  rank = (rank || "SILVER").toUpperCase();
  productType = (productType || "general").toLowerCase();
  shippingMethod = (shippingMethod || "land").toLowerCase();

  // Validate inputs
  const validRanks = ["SILVER", "DIAMOND", "STAR"];
  const validProductTypes = ["general", "type1-2", "special"];
  const validShippingMethods = ["land", "sea"];

  if (!validRanks.includes(rank)) rank = "SILVER";
  if (!validProductTypes.includes(productType)) productType = "general";
  if (!validShippingMethods.includes(shippingMethod)) shippingMethod = "land";

  const rates = {
    SILVER: {
      land: {
        general: { perKg: 50, perCBM: 7500 },
        "type1-2": { perKg: 60, perCBM: 8500 },
        special: { perKg: 120, perCBM: 12000 },
      },
      sea: {
        general: { perKg: 45, perCBM: 5400 },
        "type1-2": { perKg: 50, perCBM: 6900 },
        special: { perKg: 120, perCBM: 12000 },
      },
    },
    DIAMOND: {
      land: {
        general: { perKg: 45, perCBM: 7300 },
        "type1-2": { perKg: 55, perCBM: 8300 },
        special: { perKg: 110, perCBM: 11000 },
      },
      sea: {
        general: { perKg: 40, perCBM: 4900 },
        "type1-2": { perKg: 50, perCBM: 6500 },
        special: { perKg: 110, perCBM: 11000 },
      },
    },
    STAR: {
      land: {
        general: { perKg: 40, perCBM: 6800 },
        "type1-2": { perKg: 50, perCBM: 7800 },
        special: { perKg: 100, perCBM: 10000 },
      },
      sea: {
        general: { perKg: 35, perCBM: 4500 },
        "type1-2": { perKg: 45, perCBM: 6300 },
        special: { perKg: 100, perCBM: 10000 },
      },
    },
  };

  return rates[rank][shippingMethod][productType];
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏∏‡∏ó‡∏ò‡∏¥
 * @param {number} weight - ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á (‡∏Å‡∏Å.)
 * @param {number} cbm - ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ (CBM)
 * @param {Object} rate - ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á
 * @returns {Object} ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
 */
function calculateShippingFee(weight, cbm, rate) {
  if (
    !rate ||
    typeof rate.perCBM !== "number" ||
    typeof rate.perKg !== "number"
  ) {
    throw new Error("Invalid rate object provided");
  }

  const volumetricFee = cbm * rate.perCBM;
  const weightFee = weight * rate.perKg;

  return {
    fee: Math.max(volumetricFee, weightFee),
    method: volumetricFee > weightFee ? "CBM" : "WEIGHT",
  };
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
 * @param {Object} params - ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns {Object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö { isValid, message }
 */
function validateParameters(params) {
  const { width, length, height, weight } = params;

  // Check if all required parameters exist
  if (!width || !length || !height || !weight) {
    return {
      isValid: false,
      message:
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏Å‡∏ß‡πâ‡∏≤‡∏á x ‡∏¢‡∏≤‡∏ß x ‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å) ‡πÄ‡∏ä‡πà‡∏ô:\n- ‡∏Å‡∏ß‡πâ‡∏≤‡∏á 50 ‡∏ã‡∏°.\n- ‡∏¢‡∏≤‡∏ß 60 ‡∏ã‡∏°.\n- ‡∏™‡∏π‡∏á 40 ‡∏ã‡∏°.\n- ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 5 ‡∏Å‡∏Å.",
    };
  }

  // Check if all parameters are numbers and positive
  if (
    typeof width !== "number" ||
    typeof length !== "number" ||
    typeof height !== "number" ||
    typeof weight !== "number"
  ) {
    return {
      isValid: false,
      message: "‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
    };
  }

  if (width <= 0 || length <= 0 || height <= 0 || weight <= 0) {
    return {
      isValid: false,
      message: "‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0",
    };
  }

  // Add maximum size constraints if needed
  const MAX_DIMENSION = 1000; // 10 meters in cm
  const MAX_WEIGHT = 10000; // 10 tons in kg

  if (
    width > MAX_DIMENSION ||
    length > MAX_DIMENSION ||
    height > MAX_DIMENSION
  ) {
    return {
      isValid: false,
      message: "‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1000 ‡∏ã‡∏°. (10 ‡πÄ‡∏°‡∏ï‡∏£)",
    };
  }

  if (weight > MAX_WEIGHT) {
    return {
      isValid: false,
      message: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 10,000 ‡∏Å‡∏Å. (10 ‡∏ï‡∏±‡∏ô)",
    };
  }

  return { isValid: true };
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
 * @param {FirebaseDatabase} db - Firebase database instance
 * @param {string} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @returns {Promise<void>}
 */
async function saveCalculationData(data, db, userId) {
  if (!db || !userId) {
    console.warn("Missing database instance or user ID");
    return;
  }

  try {
    const calculationRef = db.ref(`shipping_calculations/${userId}`);
    await calculationRef.push({
      ...data,
      timestamp: getThaiTime().toISOString(),
      created_at: new Date().toISOString(),
    });
  } catch (error) {
    console.error("Database error:", error);
    // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
 * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
 * @returns {string} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
 */
function createResponse(data) {
  const {
    width,
    length,
    height,
    weight,
    cbm,
    rank,
    productType,
    shippingMethod,
    fee,
    method,
  } = data;

  const productTypeMapping = {
    general: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
    "type1-2": "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 1,2",
    special: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©",
  };

  return (
    `üöö ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á:\n\n` +
    `üì¶ ‡∏Ç‡∏ô‡∏≤‡∏î: ${width}x${length}x${height} ‡∏ã‡∏°.\n` +
    `‚öñÔ∏è ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${weight} ‡∏Å‡∏Å.\n` +
    `üìä ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£: ${cbm.toFixed(3)} CBM\n` +
    `üèÜ Rank: ${rank} Rabbit\n` +
    `üè∑Ô∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${productTypeMapping[productType] || productType}\n` +
    `üöõ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ç‡∏ô‡∏™‡πà‡∏á: ${shippingMethod === "land" ? "‡∏ó‡∏≤‡∏á‡∏£‡∏ñ" : "‡∏ó‡∏≤‡∏á‡πÄ‡∏£‡∏∑‡∏≠"}\n` +
    `üí∞ ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á: ${fee.toFixed(2)} ‡∏ö‡∏≤‡∏ó\n` +
    `‚ÑπÔ∏è ‡∏Ñ‡∏¥‡∏î‡∏ï‡∏≤‡∏°: ${method === "CBM" ? "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£" : "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å"}`
  );
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Intent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á
 * @param {DialogflowAgent} agent - Dialogflow agent
 * @param {FirebaseDatabase} db - Firebase database instance
 */
async function handleShippingCalculation(agent, db) {
  try {
    // ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å Dialogflow ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    const parameters = agent.parameters || {};
    const {
      width = 0,
      length = 0,
      height = 0,
      weight = 0,
      productType = "general",
      shippingMethod = "land",
      accumulatedAmount = 0,
    } = parameters;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    const validation = validateParameters({ width, length, height, weight });
    if (!validation.isValid) {
      agent.add(validation.message);
      return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const cbm = calculateCBM(width, length, height);
    const rank = determineRank(accumulatedAmount);

    try {
      const rate = getShippingRate(rank, productType, shippingMethod);
      const { fee, method } = calculateShippingFee(weight, cbm, rate);

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      const calculationData = {
        dimensions: { width, length, height },
        weight,
        cbm,
        productType,
        shippingMethod,
        rank,
        fee,
        calculationMethod: method,
      };

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const userId =
        agent.originalRequest?.payload?.data?.source?.userId || "unknown";
      await saveCalculationData(calculationData, db, userId);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      const response = createResponse({
        width,
        length,
        height,
        weight,
        cbm,
        rank,
        productType,
        shippingMethod,
        fee,
        method,
      });

      agent.add(response);
    } catch (error) {
      console.error("Rate calculation error:", error);
      agent.add(
        "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"
      );
    }
  } catch (error) {
    console.error("‚ùå Error in handleShippingCalculation:", error);
    agent.add("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
  }
}

module.exports = {
  calculateCBM,
  determineRank,
  getShippingRate,
  calculateShippingFee,
  handleShippingCalculation,
  validateParameters,
  saveCalculationData,
  createResponse,
};
